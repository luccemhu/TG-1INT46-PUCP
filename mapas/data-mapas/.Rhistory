labels = c("Trabajó", "No trabajó")
)
# Calcular totales para trabajo (agregar categoría "Total")
totales_trabajo <- data %>%
group_by(trabajo) %>%
summarise(
conteo = n(),
sexo = "Total",  # Etiqueta "Total"
.groups = "drop"
) %>%
mutate(
porcentaje = conteo / sum(conteo) * 100  # Calcular porcentaje total
)
# Unir los totales al resumen
trabajo_summary_total <- trabajo_summary %>%
bind_rows(totales_trabajo)
# Verificar y ajustar niveles de la variable trabajo
trabajo_summary_total <- trabajo_summary_total %>%
mutate(trabajo = factor(trabajo, levels = c("Trabajó", "No trabajó")))
# Crear el gráfico con barras separadas
p_trabajo_separado <- ggplot(trabajo_summary_total, aes(x = sexo, y = porcentaje, fill = trabajo)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8), color = "black", width = 0.7) +  # Barras separadas
geom_text(
aes(label = sprintf("%.1f%%", porcentaje)),
position = position_dodge(width = 0.8),  # Etiquetas encima de las barras separadas
vjust = -0.5, size = 4, fontface = "bold"
) +
scale_fill_manual(
values = c("red", "cyan"),  # Colores originales de R
name = "Estado laboral"     # Título de la leyenda
) +
labs(
title = "Estado de Actividad Laboral de la Población Venezolana en el Perú (2022)",
subtitle = "Distribución por género y total según estado de actividad laboral",
x = "Categoría",
y = "Porcentaje",
caption = "Fuente: Elaboración propia con datos de ENPOVE 2022"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
plot.caption = element_text(size = 10, color = "grey40", hjust = 1),
legend.position = "bottom",
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 10),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold")
)
# Mostrar el gráfico
print(p_trabajo_separado)
# Cargar las librerías necesarias
library(tidyverse)
# Leer los datos
data <- read.csv("full_data_2022.csv", stringsAsFactors = FALSE, fileEncoding = "latin1")
# Preparar los datos para "trabajo"
data <- data %>%
mutate(
trabajo = as.factor(trabajo_semana_anterior),  # Convertir la columna a factor
sexo = ifelse(sexo == 1, "Hombre", "Mujer")   # Reemplazar valores con etiquetas
) %>%
filter(!is.na(trabajo))  # Eliminar filas con NA en "trabajo"
# Resumir los datos por género y estado de trabajo
trabajo_summary <- data %>%
group_by(sexo, trabajo) %>%
summarise(conteo = n(), .groups = "drop") %>%
mutate(
porcentaje = conteo / sum(conteo) * 100  # Calcular porcentaje por grupo
)
# Ajustar etiquetas para la variable trabajo
trabajo_summary$trabajo <- factor(
trabajo_summary$trabajo,
levels = c(1, 2),  # Ajustar niveles
labels = c("Trabajó", "No trabajó")
)
# Calcular totales para trabajo (agregar categoría "Total")
totales_trabajo <- data %>%
group_by(trabajo) %>%
summarise(
conteo = n(),
sexo = "Total",  # Etiqueta "Total"
.groups = "drop"
) %>%
mutate(
porcentaje = conteo / sum(conteo) * 100  # Calcular porcentaje total
)
# Unir los totales al resumen
trabajo_summary_total <- trabajo_summary %>%
bind_rows(totales_trabajo)
# Crear el gráfico con barras separadas
p_trabajo_separado <- ggplot(trabajo_summary_total, aes(x = sexo, y = porcentaje, fill = trabajo)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8), color = "black", width = 0.7) +  # Barras separadas
geom_text(
aes(label = sprintf("%.1f%%", porcentaje)),
position = position_dodge(width = 0.8),  # Etiquetas encima de las barras separadas
vjust = -0.5, size = 4, fontface = "bold"
) +
scale_fill_manual(
values = c("#FF6961", "#77DD77"),  # Colores similares al gráfico proporcionado
name = "Estado laboral"            # Título de la leyenda
) +
labs(
title = "Estado de Actividad Laboral de la Población Venezolana en el Perú (2022)",
subtitle = "Distribución por género y total según estado de actividad laboral",
x = "Categoría",
y = "Porcentaje",
caption = "Fuente: Elaboración propia con datos de ENPOVE 2022"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
plot.caption = element_text(size = 10, color = "grey40", hjust = 1),
legend.position = "bottom",
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 10),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold")
)
# Mostrar el gráfico
print(p_trabajo_separado)
# Cargar las librerías necesarias
library(tidyverse)
# Leer los datos
data <- read.csv("full_data_2022.csv", stringsAsFactors = FALSE, fileEncoding = "latin1")
# Preparar los datos para "trabajo"
data <- data %>%
mutate(
trabajo = as.factor(trabajo_semana_anterior),  # Convertir la columna a factor
sexo = ifelse(sexo == 1, "Hombre", "Mujer")   # Reemplazar valores con etiquetas
) %>%
filter(!is.na(trabajo))  # Eliminar filas con NA en "trabajo"
# Ajustar niveles para la variable "trabajo"
data$trabajo <- factor(data$trabajo, levels = c(1, 2), labels = c("Trabajó", "No trabajó"))
# Resumir los datos por género y estado de trabajo
trabajo_summary <- data %>%
group_by(sexo, trabajo) %>%
summarise(conteo = n(), .groups = "drop") %>%
mutate(
porcentaje = conteo / sum(conteo) * 100  # Calcular porcentaje por grupo
)
# Calcular totales para trabajo (agregar categoría "Total")
totales_trabajo <- data %>%
group_by(trabajo) %>%
summarise(
conteo = n(),
sexo = "Total",  # Etiqueta "Total"
.groups = "drop"
) %>%
mutate(
porcentaje = conteo / sum(conteo) * 100  # Calcular porcentaje total
)
# Unir los totales al resumen
trabajo_summary_total <- trabajo_summary %>%
bind_rows(totales_trabajo)
# Crear el gráfico con barras separadas
p_trabajo_separado <- ggplot(trabajo_summary_total, aes(x = sexo, y = porcentaje, fill = trabajo)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8), color = "black", width = 0.7) +  # Barras separadas
geom_text(
aes(label = sprintf("%.1f%%", porcentaje)),
position = position_dodge(width = 0.8),  # Etiquetas encima de las barras separadas
vjust = -0.5, size = 4, fontface = "bold"
) +
scale_fill_manual(
values = c("#FF6961", "#77DD77"),  # Colores similares al gráfico proporcionado
name = "Estado laboral"            # Título de la leyenda
) +
labs(
title = "Estado de Actividad Laboral de la Población Venezolana en el Perú (2022)",
subtitle = "Distribución por género y total según estado de actividad laboral",
x = "Categoría",
y = "Porcentaje",
caption = "Fuente: Elaboración propia con datos de ENPOVE 2022"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
plot.caption = element_text(size = 10, color = "grey40", hjust = 1),
legend.position = "bottom",
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 10),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold")
)
# Mostrar el gráfico
print(p_trabajo_separado)
# Form
# Crear el gráfico con barras separadas
p_trabajo_separado <- ggplot(trabajo_summary_total, aes(x = sexo, y = porcentaje, fill = trabajo)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8), color = "black", width = 0.7) +  # Barras separadas
geom_text(
aes(label = sprintf("%.1f%%", porcentaje)),
position = position_dodge(width = 0.8),  # Etiquetas encima de las barras separadas
vjust = -0.5, size = 4, fontface = "bold"
) +
scale_fill_manual(
name = "Estado laboral"            # Título de la leyenda
) +
labs(
title = "Estado de Actividad Laboral de la Población Venezolana en el Perú (2022)",
subtitle = "Distribución por género y total según estado de actividad laboral",
x = "Categoría",
y = "Porcentaje",
caption = "Fuente: Elaboración propia con datos de ENPOVE 2022"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
plot.caption = element_text(size = 10, color = "grey40", hjust = 1),
legend.position = "bottom",
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 10),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold")
)
# Mostrar el gráfico
print(p_trabajo_separado)
# Cargar las librerías necesarias
library(tidyverse)
# Leer los datos
data <- read.csv("full_data_2022.csv", stringsAsFactors = FALSE, fileEncoding = "latin1")
# Preparar los datos para "trabajo"
data <- data %>%
mutate(
trabajo = as.factor(trabajo_semana_anterior),  # Convertir la columna a factor
sexo = ifelse(sexo == 1, "Hombre", "Mujer")   # Reemplazar valores con etiquetas
) %>%
filter(!is.na(trabajo))  # Eliminar filas con NA en "trabajo"
# Ajustar niveles para la variable "trabajo"
data$trabajo <- factor(data$trabajo, levels = c(1, 2), labels = c("Trabajó", "No trabajó"))
# Resumir los datos por género y estado de trabajo
trabajo_summary <- data %>%
group_by(sexo, trabajo) %>%
summarise(conteo = n(), .groups = "drop") %>%
mutate(
porcentaje = conteo / sum(conteo) * 100  # Calcular porcentaje por grupo
)
# Calcular totales para trabajo (agregar categoría "Total")
totales_trabajo <- data %>%
group_by(trabajo) %>%
summarise(
conteo = n(),
sexo = "Total",  # Etiqueta "Total"
.groups = "drop"
) %>%
mutate(
porcentaje = conteo / sum(conteo) * 100  # Calcular porcentaje total
)
# Unir los totales al resumen
trabajo_summary_total <- trabajo_summary %>%
bind_rows(totales_trabajo)
# Crear el gráfico con barras separadas
p_trabajo_separado <- ggplot(trabajo_summary_total, aes(x = sexo, y = porcentaje, fill = trabajo)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8), color = "black", width = 0.7) +  # Barras separadas
geom_text(
aes(label = sprintf("%.1f%%", porcentaje)),
position = position_dodge(width = 0.8),  # Etiquetas encima de las barras separadas
vjust = -0.5, size = 4, fontface = "bold"
) +
scale_fill_manual(
name = "Estado laboral"            # Título de la leyenda
) +
labs(
title = "Estado de Actividad Laboral de la Población Venezolana en el Perú (2022)",
subtitle = "Distribución por género y total según estado de actividad laboral",
x = "Categoría",
y = "Porcentaje",
caption = "Fuente: Elaboración propia con datos de ENPOVE 2022"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
plot.caption = element_text(size = 10, color = "grey40", hjust = 1),
legend.position = "bottom",
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 10),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold")
)
# Mostrar el gráfico
print(p_trabajo_separado)
# Cargar las librerías necesarias
library(tidyverse)
# Leer los datos
data <- read.csv("full_data_2022.csv", stringsAsFactors = FALSE, fileEncoding = "latin1")
# Preparar los datos para "trabajo"
data <- data %>%
mutate(
trabajo = as.factor(trabajo_semana_anterior),  # Convertir la columna a factor
sexo = ifelse(sexo == 1, "Hombre", "Mujer")   # Reemplazar valores con etiquetas
) %>%
filter(!is.na(trabajo))  # Eliminar filas con NA en "trabajo"
# Ajustar niveles para la variable "trabajo"
data$trabajo <- factor(data$trabajo, levels = c(1, 2), labels = c("Trabajó", "No trabajó"))
# Resumir los datos por género y estado de trabajo
trabajo_summary <- data %>%
group_by(sexo, trabajo) %>%
summarise(conteo = n(), .groups = "drop") %>%
mutate(
porcentaje = conteo / sum(conteo) * 100  # Calcular porcentaje por grupo
)
# Calcular totales para trabajo (agregar categoría "Total")
totales_trabajo <- data %>%
group_by(trabajo) %>%
summarise(
conteo = n(),
sexo = "Total",  # Etiqueta "Total"
.groups = "drop"
) %>%
mutate(
porcentaje = conteo / sum(conteo) * 100  # Calcular porcentaje total
)
# Unir los totales al resumen
trabajo_summary_total <- trabajo_summary %>%
bind_rows(totales_trabajo)
# Crear el gráfico con barras separadas (colores predeterminados de R)
p_trabajo_separado <- ggplot(trabajo_summary_total, aes(x = sexo, y = porcentaje, fill = trabajo)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8), color = "black", width = 0.7) +  # Barras separadas
geom_text(
aes(label = sprintf("%.1f%%", porcentaje)),
position = position_dodge(width = 0.8),  # Etiquetas encima de las barras separadas
vjust = -0.5, size = 4, fontface = "bold"
) +
labs(
title = "Estado de Actividad Laboral de la Población Venezolana en el Perú (2022)",
subtitle = "Distribución por género y total según estado de actividad laboral",
x = "Categoría",
y = "Porcentaje",
caption = "Fuente: Elaboración propia con datos de ENPOVE 2022"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
plot.caption = element_text(size = 10, color = "grey40", hjust = 1),
legend.position = "bottom",
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 10),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold")
)
# Mostrar el gráfico
print(p_trabajo_separado)
# Guardar el gráfico en alta calidad
ggsave(
filename = "trabajo_estado_barras_separadas_colores.png",  # Nombre del archivo
plot = p_trabajo_separado,                                 # Objeto del gráfico
dpi = 300,                                                 # Resolución en puntos por pulgada
width = 10,                                                # Ancho en pulgadas
height = 8,                                                # Alto en pulgadas
units = "in",                                              # Unidades en pulgadas
device = "png"                                             # Formato del archivo
)
# Preparar los datos para "trabajo"
data <- data %>%
mutate(
trabajo = as.factor(trabajo_semana_anterior),  # Convertir la columna a factor
sexo = ifelse(sexo == 1, "Hombre", "Mujer")   # Reemplazar valores con etiquetas
) %>%
filter(!is.na(trabajo))  # Eliminar filas con NA en "trabajo"
# Ajustar niveles para la variable "trabajo"
data$trabajo <- factor(data$trabajo, levels = c(1, 2), labels = c("Trabajó", "No trabajó"))
# Resumir los datos por género y estado de trabajo
trabajo_summary <- data %>%
group_by(sexo, trabajo) %>%
summarise(conteo = n(), .groups = "drop") %>%
mutate(
porcentaje = conteo / sum(conteo) * 100  # Calcular porcentaje por grupo
)
# Calcular totales para trabajo (agregar categoría "Total")
totales_trabajo <- data %>%
group_by(trabajo) %>%
summarise(
conteo = n(),
sexo = "Total",  # Etiqueta "Total"
.groups = "drop"
) %>%
mutate(
porcentaje = conteo / sum(conteo) * 100  # Calcular porcentaje total
)
# Unir los totales al resumen
trabajo_summary_total <- trabajo_summary %>%
bind_rows(totales_trabajo)
# Crear el gráfico con barras separadas (colores predeterminados de R)
p_trabajo_separado <- ggplot(trabajo_summary_total, aes(x = sexo, y = porcentaje, fill = trabajo)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8), color = "black", width = 0.7) +  # Barras separadas
geom_text(
aes(label = sprintf("%.1f%%", porcentaje)),
position = position_dodge(width = 0.8),  # Etiquetas encima de las barras separadas
vjust = -0.5, size = 4, fontface = "bold"
) +
labs(
title = "Estado de actividad laboral de la población venezolana en el Perú (2022)",
subtitle = "Distribución por género y total según estado de actividad laboral",
x = "Categoría",
y = "Porcentaje",
caption = "Fuente: Elaboración propia con datos de ENPOVE 2022"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
plot.caption = element_text(size = 10, color = "grey40", hjust = 1),
legend.position = "bottom",
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 10),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold")
)
# Mostrar el gráfico
print(p_trabajo_separado)
# Guardar el gráfico en alta calidad
ggsave(
filename = "trabajo_estado_barras_separadas_colores.png",  # Nombre del archivo
plot = p_trabajo_separado,                                 # Objeto del gráfico
dpi = 300,                                                 # Resolución en puntos por pulgada
width = 10,                                                # Ancho en pulgadas
height = 8,                                                # Alto en pulgadas
units = "in",                                              # Unidades en pulgadas
device = "png"                                             # Formato del archivo
)
# Cargar las librerías necesarias
library(tidyverse)
# Leer los datos
data <- read.csv("full_data_2022.csv", stringsAsFactors = FALSE, fileEncoding = "latin1")
# Preparar los datos para "trabajo"
data <- data %>%
mutate(
trabajo = as.factor(trabajo_semana_anterior),  # Convertir la columna a factor
sexo = ifelse(sexo == 1, "Hombre", "Mujer")   # Reemplazar valores con etiquetas
) %>%
filter(!is.na(trabajo))  # Eliminar filas con NA en "trabajo"
# Ajustar niveles para la variable "trabajo"
data$trabajo <- factor(data$trabajo, levels = c(1, 2), labels = c("Trabajó", "No trabajó"))
# Resumir los datos por género y estado de trabajo
trabajo_summary <- data %>%
group_by(sexo, trabajo) %>%
summarise(conteo = n(), .groups = "drop") %>%
mutate(
porcentaje = conteo / sum(conteo) * 100  # Calcular porcentaje por grupo
)
# Calcular totales para trabajo (agregar categoría "Total")
totales_trabajo <- data %>%
group_by(trabajo) %>%
summarise(
conteo = n(),
sexo = "Total",  # Etiqueta "Total"
.groups = "drop"
) %>%
mutate(
porcentaje = conteo / sum(conteo) * 100  # Calcular porcentaje total
)
# Unir los totales al resumen
trabajo_summary_total <- trabajo_summary %>%
bind_rows(totales_trabajo)
# Crear el gráfico con barras separadas (colores predeterminados de R)
p_trabajo_separado <- ggplot(trabajo_summary_total, aes(x = sexo, y = porcentaje, fill = trabajo)) +
geom_bar(stat = "identity", position = position_dodge(width = 0.8), color = "black", width = 0.7) +  # Barras separadas
geom_text(
aes(label = sprintf("%.1f%%", porcentaje)),
position = position_dodge(width = 0.8),  # Etiquetas encima de las barras separadas
vjust = -0.5, size = 4, fontface = "bold"
) +
labs(
title = "Estado de actividad laboral de la población venezolana en el Perú (2022)",
subtitle = "Distribución por género y total según estado de actividad laboral",
x = "Categoría",
y = "Porcentaje",
caption = "Fuente: Elaboración propia con datos de ENPOVE 2022"
) +
theme_minimal(base_size = 14) +
theme(
plot.title = element_text(face = "bold", size = 16, hjust = 0.5),
plot.subtitle = element_text(size = 12, hjust = 0.5),
plot.caption = element_text(size = 10, color = "grey40", hjust = 1),
legend.position = "bottom",
legend.title = element_text(size = 12, face = "bold"),
legend.text = element_text(size = 10),
axis.text.x = element_text(size = 12),
axis.text.y = element_text(size = 10),
axis.title.x = element_text(size = 12, face = "bold"),
axis.title.y = element_text(size = 12, face = "bold")
)
# Mostrar el gráfico
print(p_trabajo_separado)
# Guardar el gráfico en alta calidad
ggsave(
filename = "trabajo_estado_barras_separadas_colores.png",  # Nombre del archivo
plot = p_trabajo_separado,                                 # Objeto del gráfico
dpi = 300,                                                 # Resolución en puntos por pulgada
width = 10,                                                # Ancho en pulgadas
height = 8,                                                # Alto en pulgadas
units = "in",                                              # Unidades en pulgadas
device = "png"                                             # Formato del archivo
)
